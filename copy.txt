// MainScreen.tsx
import React, { useState } from 'react';
import { View, Text, Button, Image, FlatList, StyleSheet, TouchableOpacity } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { firestore } from './firebaseConfig';
import { collection, addDoc, query, where, getDocs, doc, updateDoc } from 'firebase/firestore';

interface Product {
  id: number;
  name: string;
}

interface Table {
  id: number;
  cart: Product[];
  order: Order | null;
}

interface Order {
  id: string;
  items: Product[];
  status: string;
}

const MainScreen: React.FC = () => {
  const [tables, setTables] = useState<Table[]>([
    { id: 1, cart: [], order: null },
    { id: 2, cart: [], order: null },
    { id: 3, cart: [], order: null },
    { id: 4, cart: [], order: null },
    { id: 5, cart: [], order: null },
  ]);

  const [selectedTable, setSelectedTable] = useState<number | null>(null);
  const [productList] = useState<Product[]>([
    { id: 1, name: 'Pizza' },
    { id: 2, name: 'Burger' },
    { id: 3, name: 'Pasta' },
    { id: 4, name: 'Salad' },
    { id: 5, name: 'Soda' },
  ]);

  const navigation = useNavigation();

  const addProductToCart = (tableId: number, product: Product) => {
    setTables(tables.map(table =>
      table.id === tableId
        ? { ...table, cart: [...table.cart, product] }
        : table
    ));
  };

  const submitOrder = async (tableId: number) => {
    const table = tables.find(t => t.id === tableId);
    if (table) {
      const newOrder: Order = { id: '', items: table.cart, status: 'submitted' };
      try {
        const docRef = await addDoc(collection(firestore, 'orders'), {
          tableId,
          items: newOrder.items,
          status: newOrder.status,
        });
        newOrder.id = docRef.id;
        setTables(tables.map(t =>
          t.id === tableId
            ? { ...t, order: newOrder, cart: [] }
            : t
        ));
      } catch (error) {
        console.error("Error submitting order: ", error);
      }
    }
  };

  const updateOrder = async (tableId: number, extraItem: Product) => {
    const table = tables.find(t => t.id === tableId);
    if (table && table.order) {
      const updatedOrder = { ...table.order, items: [...table.order.items, extraItem] };
      try {
        const orderRef = doc(firestore, 'orders', table.order.id);
        await updateDoc(orderRef, {
          items: updatedOrder.items,
        });
        setTables(tables.map(t =>
          t.id === tableId
            ? { ...t, order: updatedOrder }
            : t
        ));
      } catch (error) {
        console.error("Error updating order: ", error);
      }
    }
  };

  const renderProduct = ({ item }: { item: Product }) => (
    <Button
      title={`Add ${item.name}`}
      onPress={() => addProductToCart(selectedTable!, item)}
    />
  );

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Restaurant Order Tracking</Text>
      <View style={styles.tablesContainer}>
        {tables.map(table => (
          <TouchableOpacity key={table.id} style={styles.tableButton} onPress={() => setSelectedTable(table.id)}>
            <Image source={{ uri: 'https://via.placeholder.com/100' }} style={styles.tableImage} />
            <Text>Table {table.id}</Text>
          </TouchableOpacity>
        ))}
      </View>

      {selectedTable && (
        <View style={styles.orderContainer}>
          <Text style={styles.subtitle}>Table {selectedTable} Order</Text>
          <FlatList
            data={productList}
            renderItem={renderProduct}
            keyExtractor={item => item.id.toString()}
          />
          <Button
            title="Submit Order"
            onPress={() => submitOrder(selectedTable)}
            disabled={tables.find(table => table.id === selectedTable)!.cart.length === 0}
          />
          <Button
            title="Add Extra Item to Order"
            onPress={() => updateOrder(selectedTable, { id: 6, name: 'Extra Item' })}
            disabled={!tables.find(table => table.id === selectedTable)!.order}
          />
          <Button
            title="View Order Details"
            onPress={() => navigation.navigate('OrderDetails', { tableId: selectedTable })}
            disabled={!tables.find(table => table.id === selectedTable)!.order}
          />
          <Text style={styles.status}>
            Cart: {JSON.stringify(tables.find(table => table.id === selectedTable)!.cart)}
          </Text>
          <Text style={styles.status}>
            Order: {JSON.stringify(tables.find(table => table.id === selectedTable)!.order)}
          </Text>
        </View>
      )}
      <Button
        title="View All Orders"
        onPress={() => navigation.navigate('AllOrders')}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#f5f5f5',
  },
  title: {
    fontSize: 24,
    marginBottom: 16,
    textAlign: 'center',
  },
  tablesContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 16,
  },
  tableButton: {
    alignItems: 'center',
  },
  tableImage: {
    width: 100,
    height: 100,
    marginBottom: 8,
  },
  orderContainer: {
    padding: 16,
    backgroundColor: '#fff',
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
  },
  subtitle: {
    fontSize: 20,
    marginBottom: 16,
  },
  status: {
    marginTop: 16,
    fontSize: 16,
  },
});

export default MainScreen;
